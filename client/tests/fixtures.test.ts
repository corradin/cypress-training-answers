import { test, expect } from '@playwright/test';
import { clean, createSong } from './functions';


test.describe('Changing the songs', () => {
  // test.describe.configure({mode: 'serial'});
  test.afterAll(async ({ browser }) => {
    // Clean up
    const context = await browser.newContext();
    const page = await context.newPage();
    await clean(page);
  });
  test('Adding a song', async ({ page }) => {
    await createSong(page, 'Macarena');
    expect(true).toBe(false);
  });

  test('Edit an existing song', async ({ page }) => {
    await createSong(page, 'Mirage');

    await page.goto('http://localhost:8080/');

    // await page.locator('div:nth-child(6) > .layout > div > .cyan').click();
    // This is more readable than the line above that is generated by Playwright and commented out.
    await page.getByText('Mirage').locator('..').getByRole('link', { name: 'VIEW' }).click();
    await expect(page).toHaveURL('http://localhost:8080/#/songs/6');

    await page.getByRole('link', { name: 'Edit' }).click();
    await expect(page).toHaveURL('http://localhost:8080/#/songs/6/edit');

    await page.getByRole('textbox', { name: 'Title' }).click();

    await page.getByRole('textbox', { name: 'Title' }).fill('Mirage Edited');

    await page.getByRole('button', { name: 'Save Song' }).click();
    // await expect(page).toHaveURL('http://localhost:8080/#/songs/6');

    

    await page.getByText('TabTracker').click();
    await expect(page).toHaveURL('http://localhost:8080/#/songs');

    await page.getByText('Mirage Edited').click();
  });
});

test('Search component start state assertions', async ({ page }) => {
  await page.goto('http://localhost:8080/');

  const searchInput = await page.getByPlaceholder('Search by song title, artist, album, or genre');

  await expect(searchInput).not.toBeFocused();  
  await searchInput.click();
  await expect(searchInput).toBeFocused();
});
